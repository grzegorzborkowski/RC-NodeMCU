SERVO_GPIO = 3
ESC_GPIO = 7
CLOCK = 50
CENTRAL_POSITION=76

PIN_COMMAND_REGEXP = "(%w+)=(%w+)&*"

cfg={}
cfg.ssid="mywifi"
cfg.pwd="qwerty123"

cfg.ip="192.168.4.1"
cfg.netmask="255.255.255.0"
cfg.gateway="192.168.4.1"

wifi.setmode(wifi.SOFTAP)
wifi.ap.setip(cfg)
wifi.ap.config(cfg)

TURN_TAGS =  "<p><a href=\"?pin=5\"><button>5</button></a>&nbsp;"..
    "<a href=\"?pin=15\"><button>15</button></a>&nbsp;"..
     "<a href=\"?pin=40\"><button>40</button></a>&nbsp;"..
      "<a href=\"?pin=45\"><button>45</button></a>&nbsp;"..
       "<a href=\"?pin=77,5\"><button>77,5</button></a>&nbsp;"..
        "<a href=\"?pin=90\"><button>90</button></a>&nbsp;"..
         "<a href=\"?pin=102\"><button>102</button></a>&nbsp;"..
          "<a href=\"?pin=133\"><button>133</button></a>&nbsp;"..
           "<a href=\"?pin=170\"><button>170</button></a>&nbsp;"..
             "<a href=\"?pin=180\"><button>180</button></a></p>"

DRIVE_TAGS = "<p><a href=\"?pinD=slow\"><button>SLOW</button></a>&nbsp;"..
    "<a href=\"?pinD=fast\"><button>FAST</button></a>&nbsp;"..
    "<a href=\"?pinD=stop\"><button>STOP</button></a>&nbsp;"..
     "<a href=\"?pinD=back\"><button>BACK</button></a></p>"


function degreesToDuty(degrees)
    local duty = CENTRAL_POSITION + (degrees-90)/4,5;
    return duty;
end

function powerToDuty(power)
    local duty = 0;
    if(power<0) then
        duty = 76 + power;
    elseif(power>0) then
        duty = 83 + power;
    elseif(power==0) then
        duty = 80;
    end

    return duty;
end

-- Parameters: degrees <0, 180>
-- 180 means maximal right position of tyres
-- 90 means central position of tyres
-- 0 means maximal left position of tyres
function turn(degrees)

    pwm.stop(SERVO_GPIO);
    pwm.setclock(SERVO_GPIO, CLOCK);
    local duty = degreesToDuty(degrees);
    
    pwm.setup(SERVO_GPIO, CLOCK, duty);
    pwm.start(SERVO_GPIO);
    pwm.setduty(SERVO_GPIO, duty);

end

-- Parameters: power <-5, 5>
-- -5 means maximal speed back
-- 0 means stop
-- 5 means maximal speed forward
function drive(power)
    local duty = powerToDuty(power);

    pwm.stop(ESC_GPIO);
    pwm.setclock(ESC_GPIO, CLOCK);
    pwm.setup(ESC_GPIO, CLOCK, duty);
    pwm.start(ESC_GPIO);
    pwm.setduty(ESC_GPIO, duty);
end


local srv = net.createServer(net.TCP)
srv:listen(80,function(conn)
    conn:on("receive", function(client, request)
        local buf = "";
        local _, _, _, _, requestContent = string.find(request, "([A-Z]+) (.+)?(.+) HTTP");
        local _GET = {}
        if (requestContent ~= nil) then
            for key, value in string.gmatch(requestContent, PIN_COMMAND_REGEXP) do
                _GET[key] = value
            end
        end

        buf = buf.."<h1>My Car</h1>";
        buf = buf.."<h2>TURN (example values)</h2>";
        buf = buf..TURN_TAGS;
        buf = buf.."<h2>DRIVE</h2>";
        buf = buf..DRIVE_TAGS;

        if(_GET.pin ~= nil and _GET.pin ~= '') then
            local degrees = tonumber(_GET.pin)
            turn(degrees);
        end

        if(_GET.pinD == "slow") then
            drive(1);
        elseif(_GET.pinD == "fast") then
            drive(2);
        elseif(_GET.pinD == "stop") then
            drive(0);
        elseif(_GET.pinD == "back") then
            drive(-1);
        end

        client:send(buf);
        client:close();
        collectgarbage();
    end)
end)
